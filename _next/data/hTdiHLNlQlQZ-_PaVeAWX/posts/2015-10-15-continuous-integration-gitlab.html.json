{"pageProps":{"postData":{"id":"2015-10-15-continuous-integration-gitlab.html","contentHtml":"<p>หลังจาก Blog ที่แล้วได้เล่าถึง <a href=\"http://kittinanx.blogspot.com/2015/10/gitlab-ubuntu-1404.html\">วิธีการติดตั้ง Gitlab</a> ไปแบบคร่าวๆ คราวนี้เราจะใช้เจ้า Gitlab ทำ Continuous Integration กันดู โดยในที่นี้จะใช้โปรเจคนี้เป็นตัวอย่างในการทำ (<a href=\"https://github.com/kittinan/thailandpost-track\">https://github.com/kittinan/thailandpost-track</a>) ซึ่งเราจะทำกับภาษา PHP นั้นเอง  </p>\n<p>สมมุติว่าเจ้าโปรเจค <a href=\"https://github.com/kittinan/thailandpost-track\">https://github.com/kittinan/thailandpost-track</a>อยู่บน Gitlab ของเราเรียบร้อยแล้วนะครับ  </p>\n<p><a href=\"http://1.bp.blogspot.com/-IBdNKKR0VmM/Vh-7QZpjiXI/AAAAAAAAZfY/MVqPQK658jQ/s1600/Screenshot-kittinan%2B-%2Bthailandpost-track%2B%257C%2BGitLab%2B-%2BChromium.png\"><img src=\"http://1.bp.blogspot.com/-IBdNKKR0VmM/Vh-7QZpjiXI/AAAAAAAAZfY/MVqPQK658jQ/s640/Screenshot-kittinan%2B-%2Bthailandpost-track%2B%257C%2BGitLab%2B-%2BChromium.png\"></a>  </p>\n<p>สิ่งที่เราต้องทำอันดับแรกก็คือ เราต้องติดตั้งเจ้า Gitlab Runner (<a href=\"https://gitlab.com/gitlab-org/gitlab-ci-multi-runner\">https://gitlab.com/gitlab-org/gitlab-ci-multi-runner</a>) ซึ่งเจ้าตัวนี้มีหน้าที่ทำการ Build และรันทดสอบ  Code ของเราตามที่เราต้องการ  </p>\n<h3>ติดตั้ง Gitlab Runner</h3>\n<p>มาติดตั้งเจ้า  Gitlab Runner กันเลย<br>\n<a href=\"https://gitlab.com/gitlab-org/gitlab-ci-multi-runner/blob/master/docs/install/linux-repository.md\">https://gitlab.com/gitlab-org/gitlab-ci-multi-runner/blob/master/docs/install/linux-repository.md</a>  </p>\n<p>วิธีการติดตั้งก็ง่ายๆเหมือนติดตั้งเจ้า Gitlab นั้นแหละ  </p>\n<blockquote>\n<p>curl -L <a href=\"https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.deb.sh\">https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.deb.sh</a> | sudo bash</p>\n</blockquote>\n<blockquote>\n<p>sudo apt-get install gitlab-ci-multi-runner</p>\n</blockquote>\n<h3>เปิดการใช้งาน Continuous Integration</h3>\n<p>เราจะต้องทำการเปิดการใช้งาน Continuous Integration ในแต่ละโปรเจคก่อน โดยให้เราไปที่ Gitlab Dashboard > Continuous Integration ดังภาพ  </p>\n<p><a href=\"http://4.bp.blogspot.com/-w6VE6b2CeO0/Vh-9SAatgaI/AAAAAAAAZfk/kP_c6ddJGIc/s1600/Screenshot-Projects%2B%257C%2BDashboard%2B%257C%2BGitLab%2B-%2BChromium-1.png\"><img src=\"http://4.bp.blogspot.com/-w6VE6b2CeO0/Vh-9SAatgaI/AAAAAAAAZfk/kP_c6ddJGIc/s640/Screenshot-Projects%2B%257C%2BDashboard%2B%257C%2BGitLab%2B-%2BChromium-1.png\"></a>  </p>\n<p>คลิก Add Project to CI  </p>\n<p><a href=\"http://1.bp.blogspot.com/-wETjCFrYocA/Vh-9e_H1Y7I/AAAAAAAAZfs/d3aM8N5tVVk/s1600/Screenshot-GitLab%2B-%2BChromium.png\"><img src=\"http://1.bp.blogspot.com/-wETjCFrYocA/Vh-9e_H1Y7I/AAAAAAAAZfs/d3aM8N5tVVk/s640/Screenshot-GitLab%2B-%2BChromium.png\"></a>  </p>\n<p>ให้เราเข้าไปที่เมนู Runner  </p>\n<p><a href=\"http://1.bp.blogspot.com/-2JoQaLVdbtw/Vh-91L93cgI/AAAAAAAAZf0/72jT3XuVxsU/s1600/Screenshot-GitLab%2B-%2BChromium-1.png\"><img src=\"http://1.bp.blogspot.com/-2JoQaLVdbtw/Vh-91L93cgI/AAAAAAAAZf0/72jT3XuVxsU/s640/Screenshot-GitLab%2B-%2BChromium-1.png\"></a>  </p>\n<p>เมื่อเข้ามาในหน้า Runner แล้ว เจ้า  Gitlab ก็จะมีให้เลือกว่าเราจะใช้ Sepecific runners หรือ Shared runners  </p>\n<p>Sepecific runners - private server ของเราเอง<br>\nShared runners - server ฟรีของ gitlab  </p>\n<p>ให้กลับไปที่ Server ที่เราเพิ่งลง Gitlab Runner ไว้ รันคำสั่ง  </p>\n<blockquote>\n<p>sudo gitlab-ci-multi-runner register</p>\n</blockquote>\n<p>ให้เรานำ url ที่อยู่ในหน้าเวปมาใส่ ในที่นี้ก็คือ <a href=\"http://gitlab.kittinan.domain/ci\">http://gitlab.kittinan.domain/ci</a><br>\nหลังจากใส่  url แล้วก็ใส่ token ต่อ หลังจากนั้นจะมีให้ใส่ Description กับ tag จะใส่ไม่ใส่ก็แล้วแต่<br>\nแล้ว Gitlab Runner จะถามว่าจะใช้ executor ตัวไหน ซึ่ง Gitlab Runner ก็สามารถใช้ได้หลายอย่างเช่น docker, docker-ssh, ssh, shell, parallels ในที่นี้ใช้ shell ดังภาพ  </p>\n<p><a href=\"http://4.bp.blogspot.com/-bHZlRt16UBM/Vh-_389KR_I/AAAAAAAAZgA/SWLwtQ8X4UU/s1600/Screenshot-root%2540gitlab%253A%2B%257E-1.png\"><img src=\"http://4.bp.blogspot.com/-bHZlRt16UBM/Vh-_389KR_I/AAAAAAAAZgA/SWLwtQ8X4UU/s640/Screenshot-root%2540gitlab%253A%2B%257E-1.png\"></a>  </p>\n<p>เมื่อเรา Refresh หน้าเวป Runner ก็จะมี Runner ที่ Activate แล้วขึ้นมา  </p>\n<p><a href=\"http://3.bp.blogspot.com/-HASjMoRNlTo/Vh_AP24kigI/AAAAAAAAZgI/HsjHcSs-lCU/s1600/Screenshot-GitLab%2B-%2BChromium-2.png\"><img src=\"http://3.bp.blogspot.com/-HASjMoRNlTo/Vh_AP24kigI/AAAAAAAAZgI/HsjHcSs-lCU/s640/Screenshot-GitLab%2B-%2BChromium-2.png\"></a>  </p>\n<h3><strong>เตรียม Server ให้พร้อมรัน Test (PHP)</strong></h3>\n<p>ทำการติดตั้ง Package ต่างๆที่จะใช้ในการรัน Test ซึ่งในที่นี้เราจะทำการติดตั้ง Package PHP ต่างๆที่จำเป็นต้องใช้สำหรับโปรเจคนี้  </p>\n<blockquote>\n<p>sudo apt-get install php5-cli php5-curl</p>\n</blockquote>\n<p>ติดตั้ง composer  </p>\n<blockquote>\n<p>curl -sS <a href=\"https://getcomposer.org/installer\">https://getcomposer.org/installer</a> | php<br>\nsudo mv composer.phar /usr/bin/composer</p>\n</blockquote>\n<p>เสร็จสิ้นการเตรียม environment สำหรับการรัน Test โปรเจคนี้  </p>\n<h3>สร้างไฟล์ .gitlab-ci.yml</h3>\n<p>เราต้องทำการสร้างไฟล์ .gitlab-ci.yml ขึ้นมาใน Root Path โปรเจคของเรา ซึ่งไฟล์นี้จะทำหน้าที่ประมวลผลตามที่เราต้องการ เช่น ก่อนที่เราจะ Test เราต้องการให้ composer โหลด  library ต่างๆก่อน  </p>\n<p>สำหรับคำสั่งในไฟล์ .gitlab-ci.yml  </p>\n<p>before_script คือ ก่อนจะเริ่มทำงานตาม job ต่างๆ ให้ทำอะไรก่อนบ้าง ในที่นี้สั่งให้ composer โหลด library ต่างๆ  </p>\n<p> <br>\njob1: &#x3C;--- ชื่องาน ในที่นี้คือ job1 เราจะตั้งเป็นอะไรก็ได้เช่น TestModel<br>\nscript:<br>\n- vendor/bin/phpunit tests/    &#x3C;-- สั่งให้รัน test ใน directory tests  </p>\n<p>สามารถดูคำสั่งที่ใช้ใน .gitlab-ci.yml เพิ่มเติม ได้ที่ <a href=\"http://doc.gitlab.com/ci/yaml/README.html\">http://doc.gitlab.com/ci/yaml/README.html</a>  </p>\n<p>เมื่อเพิ่มไฟล์ .gitlab-ci.yml ให้ทำการ commit และ push  </p>\n<h3>ดูผลลัพท์ใน Gitlab</h3>\n<p>หลังจากที่เราได้ push code เข้า Gitlab เรียบร้อย เจ้า  Gitlab ก็จะไปบอก Gitlab Runner ให้ทำการทดสอบ Code ของเราตาม คำสั่งที่เราได้สั่งไว้ในไฟล์ .gitlab-ci.yml   </p>\n<p>เข้าหน้าเวป Gitlab ของเรา ดูที่  commit ก็จะเห็นสถานะของการรัน Test ดังภาพ  </p>\n<p><a href=\"http://3.bp.blogspot.com/-vx6ub1N8xpw/Vh_IbQTJUXI/AAAAAAAAZgU/Wq5kC6M7t7I/s1600/Screenshot-GitLab%2B-%2BChromium-7.png\"><img src=\"http://3.bp.blogspot.com/-vx6ub1N8xpw/Vh_IbQTJUXI/AAAAAAAAZgU/Wq5kC6M7t7I/s640/Screenshot-GitLab%2B-%2BChromium-7.png\"></a><br>\nภาพขณะตัว Runner กำลังรัน composer เพื่อโหลด library ต่างๆ  </p>\n<p><a href=\"http://3.bp.blogspot.com/-8vzGu3WGhAk/Vh_M9MyzWBI/AAAAAAAAZg4/mwLqB9HsrOc/s1600/Screenshot-GitLab%2B-%2BChromium-6.png\"><img src=\"http://3.bp.blogspot.com/-8vzGu3WGhAk/Vh_M9MyzWBI/AAAAAAAAZg4/mwLqB9HsrOc/s640/Screenshot-GitLab%2B-%2BChromium-6.png\"></a><br>\nภาพเมื่อรัน Test เสร็จแล้ว  </p>\n<p><a href=\"http://3.bp.blogspot.com/-_b9JvPlzjTQ/Vh_JAP3pZdI/AAAAAAAAZgk/n8rKJ1GCU_Q/s1600/Screenshot-GitLab%2B-%2BChromium-8.png\"><img src=\"http://3.bp.blogspot.com/-_b9JvPlzjTQ/Vh_JAP3pZdI/AAAAAAAAZgk/n8rKJ1GCU_Q/s640/Screenshot-GitLab%2B-%2BChromium-8.png\"></a><br>\nพอเรากลับมาดูที่หน้า  Commit ก็จะเป็นว่า Run Test  ผ่านเรียบร้อย Success เขียวๆ ดังภาพ  </p>\n<p><a href=\"http://4.bp.blogspot.com/-zg5VY67zTW0/Vh_JSChK77I/AAAAAAAAZgs/fJERhmNthoI/s1600/Screenshot-GitLab%2B-%2BChromium-9.png\"><img src=\"http://4.bp.blogspot.com/-zg5VY67zTW0/Vh_JSChK77I/AAAAAAAAZgs/fJERhmNthoI/s640/Screenshot-GitLab%2B-%2BChromium-9.png\"></a>  </p>\n<p>เป็นอันเสร็จสิ้นการทำ Continuous Integration ด้วย Gitlab  (PHP) แบบคร่าวๆแล้วครับ  </p>\n<p>REF:<br>\n<a href=\"https://gitlab.com/gitlab-org/gitlab-ci-multi-runner/blob/master/docs/install/linux-repository.md\">https://gitlab.com/gitlab-org/gitlab-ci-multi-runner/blob/master/docs/install/linux-repository.md</a><br>\n<a href=\"https://about.gitlab.com/gitlab-ci/\">https://about.gitlab.com/gitlab-ci/</a><br>\n<a href=\"http://doc.gitlab.com/ci/yaml/README.html\">http://doc.gitlab.com/ci/yaml/README.html</a>  </p>\n","title":"ทำ Continuous Integration ด้วย Gitlab ","date":"2015-10-15 22:54:00"}},"__N_SSG":true}