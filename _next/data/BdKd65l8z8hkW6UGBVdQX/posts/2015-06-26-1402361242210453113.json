{"pageProps":{"postData":{"id":"2015-06-26-1402361242210453113","contentHtml":"<p>วันนี้จะมาลองเล่น Docker ให้ เชื่อมต่อกันครับ โดยปกติ (ตามที่ผมเข้าใจ) เขาจะแยก run software ออกจากกันให้อยู่กันคนละ container เพื่อง่ายต่อการนำกลับมาใช้ใหม่ครับ อย่างเช่น Nginx + PHP + MySQL ก็จะ run กันคนละ container แยกออกจากกัน  </p>\n<p>ในเมื่อ run แยกกันคนละ container แล้วมันจะเชื่อมต่อกันอย่างไรล่ะ คำตอบก็คือมันจะเชื่อมต่อกันผ่าน Network ทาง TCP/IP นั่นเอง อย่างเช่น PHP จะเชื่อมต่อ MySQL ยังไงล่ะ ปกติเรา run  มันบนเครื่องเดียวกัน มันจะเชื่อมต่อกันผ่าน unix socket ถูกไหมครับ เราก็เปลี่ยนให้มันเชื่อมต่อกันผ่านทาง Network เท่านั้นเอง ซึ่ง port default ของ mysql ก็คือ 3306 ซึ่งในบทความนี้ผมจะลองเชื่อมต่อ Nginx + PHP + MySQL ให้ดูครับ เรามาเริ่มกันเลย  </p>\n<p>ไป clone file จาก <a href=\"https://github.com/kittinan/docker-link\">https://github.com/kittinan/docker-link</a> มาก่อน หริือจะโหลดจาก <a href=\"https://github.com/kittinan/docker-link/archive/master.zip\">https://github.com/kittinan/docker-link/archive/master.zip</a> แตกไฟล์แล้ว เปิด command line แล้วไป directory ที่แตกไฟล์หรือ clone มา  </p>\n<h2><strong>MySQL</strong></h2>\n<p>เราจะต้องทำการ pull image ของ MySQL มาในเครื่องเราก่อน <a href=\"https://registry.hub.docker.com/_/mysql/\">https://registry.hub.docker.com/_/mysql/</a>  </p>\n<blockquote>\n<p>docker pull mysql</p>\n</blockquote>\n<p>เมื่อ  pull เสร็จแล้วก็จัดการ run container MySQL ขึ้นมา โดยเราจะตั้งชื่อให้มันว่า mysql_kittinan  </p>\n<blockquote>\n<p>docker run --name mysql_kittinan -e MYSQL_ROOT_PASSWORD=kittinan -e MYSQL_DATABASE=kittinandb -d mysql</p>\n</blockquote>\n<p>อธิบายคำสั่ง<br>\n--name : คือตั้งชื่อกับ container เพื่อที่จะใช้ในการเชื่อมต่อครับ<br>\n-e : การ set ตัวแปร environment ให้กับ container ครับ ในที่นี้ MYSQL_ROOT_PASSWORD คือการตั้งรหัส root ของ MySQL และ MYSQL_DATABASE ให้สร้าง database  </p>\n<p>หลังจากนั้นดูว่า run  สำเร็จด้วยคำสั่ง docker ps ก็จะขึ้นชื่อที่เราตั้งขึ้นมา  </p>\n<p>เป็นอันเสร็จขึ้นตอนของ MySQL แล้วครับ  </p>\n<h2><strong>PHP</strong></h2>\n<p>ต่อมาก็จะเป็นคิวของ PHP แล้ว ซึ่งคราวนี้เราจะ Build Image จาก Dockerfile เพราะ Image ที่เราใช้จะไม่ได้ลง extension MySQL มาใน default ของ Image  (Image ที่ใช้จะมาจาก <a href=\"https://registry.hub.docker.com/_/php/\">https://registry.hub.docker.com/_/php/</a> ) สั่ง Build Image ด้วยคำสั่ง  </p>\n<blockquote>\n<p>docker build -t kittinan:php_kittinan ./</p>\n</blockquote>\n<p>เมื่อ Build Image สำเร็จก็สั่ง run container ด้วยคำสั่ง  </p>\n<blockquote>\n<p>docker run --name php_kittinan --link mysql_kittinan:mysql -v $(pwd):/var/www/html -d kittinan:php_kittinan </p>\n</blockquote>\n<p>อธิบายคำสั่ง<br>\n--name : คือตั้งชื่อกับ container เพื่อที่จะใช้ในการเชื่อมต่อครับ<br>\n--link : container ที่ต้องการจะเชื่อมต่อด้วย โดย format จะเป็น --link CONTAINER_NAME:Alias<br>\n-v :  คือการ  mount volume จาก เครื่อง Host ไปยัง Container  ในที่นี้คือการ mount ไฟล์ใน folder ปัจจุบันไปยัง /var/www/html  </p>\n<p>จะเห็นได้ว่ามีการ link ไปกับ mysql_kittinan เพื่อที่จะติดต่อกับ  mysql container ของเรา  </p>\n<p>เป็นอันเสร็จขึ้นตอนของ PHP แล้วครับ  </p>\n<h2><strong>Nginx</strong></h2>\n<p>ถึงคราวของ Nginx แล้ว เราจะใช้ Image จากตัวนี้ <a href=\"https://registry.hub.docker.com/%5C_/nginx/\">https://registry.hub.docker.com/\\_/nginx/</a> ซึ่งเราจะไม่สร้าง Dockerfile เหมือนของ PHP เพราะเราจะปรับแต่งมันแค่นิดหน่อยพอ นั่นก็คือ default.conf ซึ่งจะอธิบายไฟล์นี้ต่อด้านล่าง เรามา run container กันก่อนเลยด้วยคำสั่ง  </p>\n<blockquote>\n<p>docker run --name nginx_kittinan --link php_kittinan:php -v $(pwd)/:/etc/nginx/conf.d/ -v $(pwd):/var/www/html -p 55580:80 -d nginx</p>\n</blockquote>\n<p>อธิบายคำสั่ง<br>\n--name : คือตั้งชื่อกับ container เพื่อที่จะใช้ในการเชื่อมต่อครับ<br>\n--link : เชื่อมต่อ container เหมือนเคยแต่คราวนี้เราจะให้ Nginx ต่อกับ PHP<br>\n-v : mount volume เช่นเคย แต่จะเห็นว่ามีการ mount ไปยัง/etc/nginx/conf.d/ นั้นก็คือ config ของ Nginx นั้นเอง<br>\n-p : port ที่จะ map กับเครื่อง Host โดย format ของมันก็คือ HOST_PORT : CONTAINER_PORT  </p>\n<p>ลองเข้าที่ <a href=\"http://localhost:55580/\">http://localhost:55580/</a>  ก็จะพบว่า connected เป็นอันเสร็จสมบูรณ์  </p>\n<p>ใครยังนึกภาพรวมไม่ออกลองดูภาพนี้<br>\n<a href=\"http://4.bp.blogspot.com/-ljL_-ZG66OU/VYy6dJ22ppI/AAAAAAAAXLw/5BQidoExjj0/s1600/docker_link.png\"><img src=\"http://4.bp.blogspot.com/-ljL_-ZG66OU/VYy6dJ22ppI/AAAAAAAAXLw/5BQidoExjj0/s1600/docker_link.png\"></a>  </p>\n<p>Container MySQL : เปิด port 3306 ไว้เฉยๆ รอรับ connection<br>\nContainer PHP : เปิด port 9000 ไว้ และมีการ link ไปยัง Container MySQL เพื่อที่จะใช้งาน Database<br>\nContainer Nginx : เปิด port 80 และมีการ link ไปยัง Container PHP เพื่อที่จะใช้งาน PHP  </p>\n<p>จะเห็นได้ว่ามีการแบ่งการทำงานของแต่ละ Container กันอย่างชัดเจนครับ  </p>\n<h2><strong>default.conf</strong></h2>\n<p> เรามาดูไฟล์ default.conf ซึ่งเป็น Config virtual host ของ Nginx ให้ดูที่บรรทัด 20  </p>\n<blockquote>\n<p>fastcgi_pass php_kittinan:9000;</p>\n</blockquote>\n<p>จะเห็นว่าชื่อ host คือ php_kittinan นั่นก็คือ ชื่อที่เราตั้งให้กับ Container PHP นั่นเอง ซึ่งตัว Docker เวลาที่เราทำการ link มันจะไปแก้ไข hosts file ให้อัตโนมัติ เดี๋ยวเราลอง shell  เข้าไปใน container ของ nginx ดูกัน ด้วยคำสั่ง  </p>\n<blockquote>\n<p>docker exec -it nginx_kittinan bash</p>\n</blockquote>\n<p>คำสั่งนี้เป็นการสั่ง execute คำสั่งต่างๆกับ Container ที่กำลังทำงานอยู่ พอเราเข้าไปใน Container Nginx แล้วลอง cat ไฟล์ /etc/hosts ดู  </p>\n<blockquote>\n<p>cat /etc/hosts</p>\n</blockquote>\n<p>ก็จะเห็นว่า Docker ได้แอบมาใส่ host ไว้ดังภาพ  </p>\n<p><a href=\"http://1.bp.blogspot.com/-NYmoYNmN018/VYzBXQIzZ6I/AAAAAAAAXMA/IZ5UWuzQZI8/s1600/Screenshot-tun%2540tun-ubuntu%253A%2B%257E-git-docker-link.png\"><img src=\"http://1.bp.blogspot.com/-NYmoYNmN018/VYzBXQIzZ6I/AAAAAAAAXMA/IZ5UWuzQZI8/s1600/Screenshot-tun%2540tun-ubuntu%253A%2B%257E-git-docker-link.png\"></a>  </p>\n<p>ไม่ยากเลยใช่ไหมครับกับการ Link Container แต่เอ๊ะ!!! กว่าจะรัน container แต่ละอัน มันดูยุ่งยากจัง เดี๋ยวบทความต่อไปเราจะมาลองเล่น Docker Compose กันครับ ซึ่งจะช่วยในการ Link Container เนี่ยแหละ  </p>\n<p>Reference<br>\n<a href=\"https://docs.docker.com/userguide/dockerlinks/\">https://docs.docker.com/userguide/dockerlinks/</a></p>\n","title":"Docker การ link container","date":"2015-06-26 10:13:00"}},"__N_SSG":true}